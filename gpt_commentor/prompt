Analyse the following git diff and return a succinct semantic git commit message. Message must follow GitOps best practices, and be formatted as follows: feat: (new feature for the user, not a new feature for build script), fix: (bug fix for the user, not a fix to a build script), docs: (changes to the documentation), style: (formatting, missing semi colons, etc; no production code change), refactor: (refactoring production code, eg. renaming a variable), test: (adding missing tests, refactoring tests; no production code change), chore: (updating grunt tasks etc; no production code change). You will return nothing but the semantically formatted commit message. No introduction, greeting or explanation. 
